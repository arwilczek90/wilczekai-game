package com.game.pente;

import java.util.Collection;
import java.util.ArrayList;

import jaima.game.Move;
import jaima.game.Player;
import jaima.game.State;

public class penteState extends State {

	String string = "";
	boolean isFiveB = false;
	boolean isFiveW = false;
	int captureW = 0;
	int captureB = 0;
//	int whosMove;
	pentePlayer[] players;
	char[] board;
	char[][] twoDBoard;
	int size;
	int diameter;
	int startingx;
	int startingy;
	char currentColor;
	boolean wCapture = false;
	boolean bCapture = false;
    int turn;

	public penteState(String s) {
		super(s);
		// if (s == "")
		// {
		// for(int i= 0; i <19; i++)
		// {
		// for (int j = 0; j < 19; j++)
		// {
		// string = string + "X";
		// }
		// }
		// }
		// else{
		string = s;
		// }
		if (players == null) {
			players = new pentePlayer[] { new pentePlayer('W'),
					new pentePlayer('B'), };
		}

		this.size = s.length();
		int stringCounter = 0;
		diameter = (int) Math.sqrt(size);
		board = new char[size];
		twoDBoard = new char[diameter][diameter];
		board = s.toUpperCase().toCharArray();

		for (int i = 0; i < diameter; i++) {
			// System.out.println(i);
			for (int j = 0; j < diameter; j++) {
				// System.out.println(j);
				// System.out.println(s.charAt(stringCounter));
				twoDBoard[i][j] = board[stringCounter];
				stringCounter++;
			}
		}

	}

	public String toString() {
		return string;
	}
	
//	public int getWhosMove()
//	{
//		return whosMove;
//	}
//	
//	public void setWhosMove(int i)
//	{
//		whosMove = i;
//	}

	public int getTurn()
	{
		return turn;
	}
	
	public void setTurn(int i)
	{
		turn = i;
	}
	
	public String prettyPrint() {

		String s = "";
		int tracking = 0;
		for (int i = 0; i < size; i++) {
			if (tracking == diameter) {
				s += "\n";
				tracking = 0;
			}
			s += board[i];
			tracking++;
		}

		return s;
	}

	@Override
	public penteState clone() {
		penteState newState = new penteState(this.string);
		return newState;
	}

	@Override
	public Collection<Move> actions() {
		Collection<Move> move = new ArrayList<Move>();
		Player personPlaying = toMove();

		for (int i = 0; i < size; i++) {
			if (board[i] == 'X') {
				Move m = new penteMove((pentePlayer) personPlaying, row(i),
						col(i));
				move.add(m);
			}
		}
		// for (int i = 0; i < diameter; i++) {
		// for (int j = 0; j < diameter; j++) {
		// if (twoDBoard[i][j] == 'X') {
		// Move m = new penteMove((pentePlayer) personPlaying, i + 1,
		// j + 1);
		// move.add(m);
		// // System.out.println(m.prettyPrint());
		// }
		// }
		// }
		return move;
	}

	@Override
	public boolean terminal() {
		if (isFiveW == true) {
			System.out.println("isFiveW");
			return true;
		}
		if (isFiveB == true) {
			System.out.println("isFiveB");

			return true;
		}
		if (captureW >= 5) {
			System.out.println("CaptureW");
			return true;
		}
		if (captureB >= 5) {
			System.out.println("CaptuerB");

			return true;
		}
		if (charCount('X') == 0) {
			System.out.println("All Filled");

			return true;
		}

		return false;
	}

	public double utility(Player p) {
		if (wCapture)
			return 2;
		if (bCapture)
			return -2;
		if (charCount('X') == 0)
			return 0;
		if (isFiveW == true)
			return 10;
		if (isFiveB == true)
			return -10;
		return 0;
	}

	public Player toMove() {
//	    int xc = charCount('W') + (captureW * 2);
//	    int oc = charCount('B') + (captureB *2);
	    int toMove;
	    if(( turn  % 2) == 0)
	    {
	    	toMove = 0;
//	    	whosMove = 0;
	    }
	    else
	    {
	    	toMove = 1;
//	    	whosMove = 1;
	    }
	
	    return players[toMove];
	 }

	private int charCount(char m) {
		int count = 0;
		for (char c : board)
			if (c == m)
				count++;
		return count;
	}

 public penteState result(jaima.game.Move jgm) {
		  penteMove n = (penteMove) jgm;
		  int r = n.row();
		  int c = n.col();
		  int i = index(r, c);
		  penteState s = clone();
		  penteState sender = clone();
		  penteState five = clone();
		  char color = toMove().toString().charAt(0);
		  s.board[i] = color;
		  s.twoDBoard[r - 1][c - 1] = color;
		  s.string = new String(s.board);
		  five.board[i] = color;
		  five.twoDBoard[r - 1][c - 1] = color;
		  five.string = new String(s.board);
		  sender = isCapture(s, c, r, color);
		  if (sender != null) 
		  {
			  return isfive(sender, c, r, color);
		  }
		  else
		  {
			  return isfive(five, c, r, color);
		  }
		 }
 
	public String boardToString() {
		String bString = "";
		for (int i = 0; i < board.length; i++) {
			bString += board[i];
		}

		return bString;
	}

	private int index(int r, int c) {
		return (r - 1) * diameter + (c - 1);
	}

	public penteState isCapture(penteState s, int x, int y, char color) {
		penteState result;

		if (color == 'B') {
			result = captureCheck(s, x, y, color, 1, 0);
			if (result != null) {
				bCapture = true;
				captureB++;
				return result;
			}

			result = captureCheck(s, x, y, color, 0, 1);
			if (result != null) {
				bCapture = true;
				captureB++;
				return result;
			}

			result = captureCheck(s, x, y, color, 1, -1);
			if (result != null) {
				bCapture = true;
				captureB++;
				return result;
			}

			result = captureCheck(s, x, y, color, 1, 1);
			if (result != null) {
				bCapture = true;
				captureB++;
				return result;
			}
		}
		if (color == 'W') {

			result = captureCheck(s, x, y, color, 1, 0);
			if (result != null) {
				wCapture = true;
				captureW++;
				return result;
			}

			result = captureCheck(s, x, y, color, 0, 1);
			if (result != null) {
				wCapture = true;
				captureW++;
				return result;
			}

			result = captureCheck(s, x, y, color, 1, -1);
			if (result != null) {
				wCapture = true;
				captureW++;
				return result;
			}

			result = captureCheck(s, x, y, color, 1, 1);
			if (result != null) {
				wCapture = true;
				captureW++;
				return result;
			}
		}
		return null;

	}

	private int row(int i) {
		return (i / diameter) + 1;
	}

	private int col(int i) {
		return (i % diameter) + 1;
	}

	public penteState captureCheck(penteState s, int x, int y, char color,
			int directionY, int directionX) {
		penteState stwoDBoard = s;
		int counter = 1;

		int xpos;
		int ypos;
		int xcap1;

		int ycap1;

		int xend;
		int yend;

		ypos = y + directionY - 1;
		xpos = x + directionX - 1;
		xcap1 = xpos + directionX;
		xend = xcap1 + directionX;
		ycap1 = ypos + directionY;
		yend = ycap1 + directionY;

		if (ypos >= 0) {
			if (xpos < diameter) {
				if (xpos >= 0) {
					if (ypos < diameter) {
						if (ycap1 >= 0) {
							if (xcap1 < diameter) {
								if (xcap1 >= 0) {
									if (ycap1 < diameter) {
										if (yend >= 0) {
											if (xend < diameter) {
												if (xend >= 0) {
													if (yend < diameter) {
														if (stwoDBoard.twoDBoard[ypos][xpos] != color) {
															if (stwoDBoard.twoDBoard[ycap1][xcap1] != color) {
																if (stwoDBoard.twoDBoard[ycap1][xcap1] != 'X')

																	if (stwoDBoard.twoDBoard[yend][xend] == color) {
																		stwoDBoard.twoDBoard[ypos][xpos] = 'X';
																		stwoDBoard.twoDBoard[ycap1][xcap1] = 'X';
																		int i = (ypos / diameter)
																				+ xpos;
																		stwoDBoard.board[i] = 'X';
																		i = (ycap1 / diameter)
																				+ xcap1;
																		stwoDBoard.board[i] = 'X';
																		stwoDBoard.string = new String(
																				stwoDBoard.board);
																		counter = 1;
																		return stwoDBoard;
																	}

															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

		}
		ypos = y - directionY - 1;
		xpos = x - directionX - 1;
		xcap1 = xpos - directionX;
		xend = xcap1 - directionX;
		ycap1 = ypos - directionY;
		yend = ycap1 - directionY;

		if (ypos >= 0) {
			if (xpos < diameter) {
				if (xpos >= 0) {
					if (ypos < diameter) {
						if (ycap1 >= 0) {
							if (xcap1 < diameter) {
								if (xcap1 >= 0) {
									if (ycap1 < diameter) {
										if (yend >= 0) {
											if (xend < diameter) {
												if (xend >= 0) {
													if (yend < diameter) {
														if (stwoDBoard.twoDBoard[ypos][xpos] != color) {
															if (stwoDBoard.twoDBoard[ycap1][xcap1] != color) {
																if (stwoDBoard.twoDBoard[ycap1][xcap1] != 'X')

																	if (stwoDBoard.twoDBoard[yend][xend] == color) {
																		stwoDBoard.twoDBoard[ypos][xpos] = 'X';
																		stwoDBoard.twoDBoard[ycap1][xcap1] = 'X';
																		int i = (ypos / diameter)
																				+ xpos;
																		stwoDBoard.board[i] = 'X';
																		i = (ycap1 / diameter)
																				+ xcap1;
																		stwoDBoard.board[i] = 'X';
																		stwoDBoard.string = new String(
																				stwoDBoard.board);
																		counter = 1;
																		return stwoDBoard;
																	}

															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

		}
		counter = 0;
		return null;
	}

	public penteState isfive(penteState s, int x, int y, char color) {
		currentColor = color;

		penteState result = s;
		if (color == 'W') {
			if (fiveChecker(s, x, y, color, 1, 0) >= 5) {

				result.isFiveW = true;
				return result;

			} else if (fiveChecker(s, x, y, color, 0, 1) >= 5) {
				{
					result.isFiveW = true;
					return result;
				}
			} else if (fiveChecker(s, x, y, color, 1, -1) >= 5) {
				result.isFiveW = true;
				return result;

			} else if (fiveChecker(s, x, y, color, 1, 1) >= 5) {
				result.isFiveW = true;
				return result;
			} 
				
		}
		if (color == 'B') {
			if (fiveChecker(s, x, y, color, 1, 0) >= 5) {
				result.isFiveB = true;
				return result;
			} else if (fiveChecker(s, x, y, color, 0, 1) >= 5) {
				result.isFiveB = true;
				return result;
			} else if (fiveChecker(s, x, y, color, 1, -1) >= 5) {
				result.isFiveB = true;
				return result;
			} else if (fiveChecker(s, x, y, color, 1, 1) >= 5) {
				result.isFiveB = true;
				return result;
			} 

				

		}
		return result;

	}

	// public enum Direction {
	// UP, UPRIGHT, UPLEFT, LEFT, RIGHT, DOWN, DOWNRIGHT, DOWNLEFT
	// }

	 public int fiveChecker(penteState s, int x, int y, char color,
			   int directionX, int directionY) {
			  char Board[][] = new char[diameter][diameter];
			  int stringCounter = 0;
			  int fivecounter = 1;

			  Board = s.twoDBoard;

			  int xpos;
			  int ypos;
			  xpos = x + directionX;
			  ypos = y + directionY;

			  
			  while (ypos >= 0 && xpos >= 0 && ypos < diameter && xpos < diameter
			    && Board[ypos][xpos] == color) {
			   fivecounter++;
			   ypos += directionY;
			   xpos += directionX;
			  }
			  
			  xpos = x -directionX;
			  ypos = y -directionY;
			  
			  
			  while (ypos >= 0 && xpos < diameter && xpos >= 0 && ypos < diameter
			    && Board[ypos][xpos] == color) {
			   
			   fivecounter++;
			   
			   ypos -= directionY;
			   xpos -= directionX;
			  }
			  // System.out.println(fivecounter);
			  int result = fivecounter;
			  return result;
