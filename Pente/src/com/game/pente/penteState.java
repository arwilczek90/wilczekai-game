package com.game.pente;

import java.util.Collection;
import java.util.ArrayList;

import jaima.game.Move;
import jaima.game.Player;
import jaima.game.State;

public class penteState extends State {

    String string = "";
    boolean isFive = false;
    int captureW = 0;
    int captureB = 0;
    int counter = 0;
    pentePlayer[] players;
    char[] board;
    char[][] twoDBoard;
    int size;
    int diameter;
    int startingx;
    int startingy;
    char currentColor;
    boolean wCapture = false;
    boolean bCapture = false;

    public penteState(String s) {
        super(s);

        string = s;
        if (players == null) {
            players = new pentePlayer[] { new pentePlayer('W'),
                    new pentePlayer('B'), };
        }

        this.size = s.length();
        int stringCounter = 0;
        diameter = (int) Math.sqrt(size);
        board = new char[size];
        twoDBoard = new char[diameter][diameter];
        board = s.toUpperCase().toCharArray();

        for (int i = 0; i < diameter; i++) {
            // System.out.println(i);
            for (int j = 0; j < diameter; j++) {
                // System.out.println(j);
                // System.out.println(s.charAt(stringCounter));
                twoDBoard[i][j] = board[stringCounter];
                stringCounter++;
            }
        }

    }

    public String toString() {
        return string;
    }

    public String prettyPrint() {

        String s = "";
        int tracking = 0;
        for (int i = 0; i < size; i++) {
            if (tracking == diameter) {
                s += "\n";
                tracking = 0;
            }
            s += board[i];
            tracking++;
        }

        return s;
    }

    @Override
    public penteState clone() {
        penteState newState = new penteState(this.string);
        return newState;
    }

    @Override
    public Collection<Move> actions() {
        Collection<Move> move = new ArrayList<Move>();
        Player personPlaying = toMove();

        for (int i = 0; i < size; i++) {
            if (board[i] == 'X') {
                Move m = new penteMove((pentePlayer) personPlaying, row(i),
                        col(i));
                move.add(m);
            }
        }
        // for (int i = 0; i < diameter; i++) {
        // for (int j = 0; j < diameter; j++) {
        // if (twoDBoard[i][j] == 'X') {
        // Move m = new penteMove((pentePlayer) personPlaying, i + 1,
        // j + 1);
        // move.add(m);
        // // System.out.println(m.prettyPrint());
        // }
        // }
        // }
        return move;
    }

    @Override
    public boolean terminal() {
        if (isFive == true) {
            
            return true;
        }
        if (captureW >= 5) {
            
            return true;
        }
        if (captureB >= 5) {
            
            return true;
        }

        return false;
    }

    public double utility(Player p) {
        // TODO Auto-generated method stub
        return 0;
    }

    public Player toMove() {
        int xc = charCount('W');
        int oc = charCount('B');
        int toMove = (xc <= oc)? 0: 1;
        return players[toMove];
    }

    private int charCount(char m) {
        int count = 0;
        for (char c : board)
            if (c == m)
                count++;
        return count;
    }

    public penteState result(jaima.game.Move jgm) {
        penteMove n = (penteMove) jgm;
        int r = n.row();
        int c = n.col();
        int i = index(r, c);
        penteState s = clone();
        penteState sender= clone();

        s.board[i] = toMove().toString().charAt(0);
        s.twoDBoard[r-1][c-1]= toMove().toString().charAt(0);
        s.string = new String(s.board);
        isCapture(s, c, r, toMove().toString().charAt(0));
        if (wCapture ==true || bCapture== true)
        {
            sender = isCapture(s, c, r, toMove().toString().charAt(0));
 //           isfive(sender,c,r,toMove().toString().charAt(0));
            return sender;
        }
        isfive(s,c, r, toMove().toString().charAt(0));


        return s;
    }

    public String boardToString() {
        String bString = "";
        for (int i = 0; i < board.length; i++) {
            bString += board[i];
        }

        return bString;
    }

    private int index(int r, int c) {
        return (r - 1) * diameter + (c - 1);
    }

    public penteState isCapture(penteState s, int x, int y, char color) {
        if (color == 'B') {
            captureCheck(s, x, y, color, 1, 0);
            if (counter == 1) {
                bCapture = true;
                captureB++;
                return  captureCheck(s, x, y, color, 1, 0);
            }
            captureCheck(s, x, y, color, 0, 1);
            if (counter == 1) {
                bCapture = true;
                captureB++;
                return captureCheck(s, x, y, color, 0, 1);
            } 
            captureCheck(s, x, y, color, 1, -1);
            
            if (counter == 1) {
                bCapture = true;
                captureB++;
                return captureCheck(s, x, y, color, 1, -1);
            }
            captureCheck(s, x, y, color, 1, 1);
            if (counter == 1) {
                bCapture = true;
                captureB++;
                return captureCheck(s, x, y, color, 1, 1);
            } else {

            }

        }
        if (color == 'W') {
            counter = 0;
            captureCheck(s, x, y, color, 1, 0);
            if (counter == 1) {
                wCapture = true;
                captureW++; 
                return  captureCheck(s, x, y, color, 1, 0);
            }
            captureCheck(s, x, y, color, 0, 1);
            if (counter == 1) {
                wCapture = true;
                captureW++;
                return captureCheck(s, x, y, color, 0, 1);
            }
            captureCheck(s, x, y, color, 1, -1);
            if (counter == 1) {
                wCapture = true;
                captureW++;
                return captureCheck(s, x, y, color, 1, -1);
            }
            captureCheck(s, x, y, color, 1, 1);
            if (counter == 1) {
                wCapture = true;
                captureW++;
                return captureCheck(s, x, y, color, 1, 1);
            } else {

            }
        }
        return null;

    }

    private int row(int i) {
        return (i / diameter) + 1;
    }

    private int col(int i) {
        return (i % diameter) + 1;
    }

    public penteState captureCheck(penteState s, int x, int y, char color, int directionY,
            int directionX) {
        penteState stwoDBoard = s;
        
        int xpos;
        int ypos;
        int xcap1;

        int ycap1;

        int xend; 
        int yend;

        
        
        ypos = y + directionY-1;
        xpos = x + directionX-1;
        xcap1 = xpos + directionX;
        xend = xcap1+ directionX;
        ycap1 = ypos +directionY;
        yend = ycap1 + directionY;
        
        if(ypos >= 0)
            {if( xpos < diameter )
                {if(xpos >= 0)
                    {if(ypos < diameter)
                        {if(ycap1 >= 0)
                            {if(xcap1 < diameter)
                                    {if(xcap1 >= 0)
                                        {if(ycap1 < diameter)
                                            {if(yend >= 0 )
                                                {if(xend < diameter)
                                                    {if(xend >= 0)
                                                        {if(yend < diameter)
                                                            {if( stwoDBoard.twoDBoard[ypos][xpos]   != color)
                                                                    {if(stwoDBoard.twoDBoard[ycap1][xcap1] != color)
                                                                        {if( stwoDBoard.twoDBoard[ycap1][xcap1] != 'X')
                                                                            
                                                                                if(stwoDBoard.twoDBoard[yend][xend] == color) {
                                                                                stwoDBoard.twoDBoard[ypos][xpos]='X';
                                                                                stwoDBoard.twoDBoard[ycap1][xcap1] = 'X';
                                                                                int i = (ypos/diameter) + xpos;
                                                                                stwoDBoard.board[i]= 'X';
                                                                                i = (ycap1/diameter) + xcap1;
                                                                                stwoDBoard.board[i] = 'X';
                                                                                stwoDBoard.string = new String(stwoDBoard.board);
                                                                                counter = 1;
                                                                                    counter = 1;
                                                                                    return stwoDBoard;
                                                                                }
                                                                                
                                                                            }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                        }
                    }
                }
            }
        
            


        }
            
        ypos = y - directionY-1;
        xpos = x - directionX-1;
        xcap1 = xpos - directionX;
        xend = xcap1- directionX;
        ycap1 = ypos -directionY;
        yend = ycap1 - directionY;
        
        if(ypos >= 0)
        {if( xpos < diameter )
            {if(xpos >= 0)
                {if(ypos < diameter)
                    {if(ycap1 >= 0)
                        {if(xcap1 < diameter)
                                {if(xcap1 >= 0)
                                    {if(ycap1 < diameter)
                                        {if(yend >= 0 )
                                            {if(xend < diameter)
                                                {if(xend >= 0)
                                                    {if(yend < diameter)
                                                        {if( stwoDBoard.twoDBoard[ypos][xpos] != color)
                                                                {if(stwoDBoard.twoDBoard[ycap1][xcap1] != color)
                                                                    {if( stwoDBoard.twoDBoard[ycap1][xcap1] != 'X')
                                                                        
                                                                            if(stwoDBoard.twoDBoard[yend][xend] == color) {
                                                                                stwoDBoard.twoDBoard[ypos][xpos]='X';
                                                                                stwoDBoard.twoDBoard[ycap1][xcap1] = 'X';
                                                                                int i = (ypos/diameter) + xpos;
                                                                                stwoDBoard.board[i]= 'X';
                                                                                i = (ycap1/diameter )+xcap1;
                                                                                stwoDBoard.board[i] = 'X';
                                                                                stwoDBoard.string = new String(stwoDBoard.board);
                                                                                counter = 1;
                                                                                return stwoDBoard;
                                                                            }
                                                                            
                                                                        }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                    }
                }
            }
        }
    
        


            }
        counter = 0;
        return null;
        }

    public void isfive(penteState s,int x, int y, char color) {
        currentColor = color;
        if (fiveChecker(s,x, y, color, 1, 0) >= 5)
            isFive = true;
            	else if (fiveChecker(s,x, y, color, 1, 0) >= 5)
			isFive = true;
        else if (fiveChecker(s,x, y, color, 1, -1) >= 5)
            isFive = true;
        else if (fiveChecker(s,x, y, color, 1, 1) >= 5)
            isFive = true;
        else
            isFive = false;

    }

    // public enum Direction {
    // UP, UPRIGHT, UPLEFT, LEFT, RIGHT, DOWN, DOWNRIGHT, DOWNLEFT
    // }

    public int fiveChecker(penteState s, int x, int y, char color, int directionX,
            int directionY) {
    	char Board[][] = new char[diameter][diameter];
        int stringCounter = 0;
        for (int i = 0; i < diameter; i++) {
            // System.out.println(i);
            for (int j = 0; j < diameter; j++) {
                // System.out.println(j);
                // System.out.println(s.charAt(stringCounter));
                Board[i][j] = s.board[stringCounter];
                stringCounter++;
            }
        }
    	
        int xpos;
        int ypos;
        xpos = x;
        ypos = y;
        counter = 1;
        ypos = y + directionY;
        xpos = x + directionX;
        while (ypos >= 0 && xpos >= 0 && ypos < diameter && xpos < diameter
                && Board[ypos][xpos] == color) {
            counter++;
            ypos += directionY;
            xpos += directionX;
        }

        ypos = y - directionY;
        xpos = x - directionX;
        while (ypos >= 0 && xpos < diameter && xpos >= 0 && ypos < diameter
                && Board[ypos][xpos] == color) {
            counter++;
            ypos -= directionY;
            xpos -= directionX;
        }
        return counter;

        // my algorithm was way to complicated decided to try a different route
        // if (counter <= 4 && direction == direction.UP && color != 'X') {
        // if (twoDBoard[xpos][ypos - diameter] == color) {
        // counter++;
        // fiveChecker(direction.UP, xpos,ypos - diameter, color);
        // return true;
        //
        // } else {
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.DOWNLEFT && color != 'X')
        // {
        // if (twoDBoard[ypos + diameter][xpos - 1] == color) {
        // counter++;
        // fiveChecker(direction.DOWNLEFT, xpos -1,ypos + diameter, color);
        //
        // return true;
        // } else {
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.DOWNRIGHT && color != 'X')
        // {
        // if (twoDBoard[xpos + 1][ypos + diameter] == color) {
        // counter++;
        // fiveChecker(direction.DOWNRIGHT, xpos,ypos - diameter, color);
        //
        // return true;
        // } else {
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.UPLEFT && color != 'X') {
        // if (twoDBoard[xpos - 1][ypos - diameter] == color) {
        // counter++;
        // fiveChecker(direction.UPLEFT, xpos,ypos - diameter, color);
        //
        // return true;
        // } else {
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.UPRIGHT && color != 'X') {
        // if (twoDBoard[xpos + 1][ypos - diameter] == color) {
        // counter++;
        // fiveChecker(direction.UPRIGHT, xpos,ypos - diameter, color);
        //
        // return true;
        // } else {
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.LEFT&& color != 'X') {
        // if ( xpos-1 != startingx && twoDBoard[xpos - 1][ypos] == color ) {
        // counter++;
        // fiveChecker(direction.LEFT, xpos,ypos - diameter, color);
        //
        // return true;
        // } else {
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.RIGHT && color != 'X') {
        // if (twoDBoard[xpos + 1][ypos] == color) {
        // counter++;
        // fiveChecker(direction.RIGHT, xpos +1,ypos, color);
        //
        // return true;
        // }
        // else{
        // counter = 0;
        // return false;
        // }
        // }
        // if (counter <= 4 && direction == direction.DOWN && color != 'X') {
        // if (twoDBoard[xpos][ypos + diameter] == color) {
        // counter++;
        // fiveChecker(direction.DOWN, xpos,ypos + diameter, color);
        //
        // return true;
        // } else {
        // counter = 0;
        // return false;
        // }
        // } else
        // return false;

    }
}
