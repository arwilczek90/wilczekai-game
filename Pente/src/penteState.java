import java.util.Collection;
import java.math.*;

import jaima.game.Move;
import jaima.game.Player;
import jaima.game.State;

public class penteState extends State {

	String string = "";
	boolean Bwhite = false;
	boolean Bblack = false;
	int captureW = 0;
	int captureB = 0;
	int counter = 0;
	pentePlayer[] players;
	char[] board;
	char[][] twoDBoard;
	int size;
	int diameter;

	public penteState(String s, int size) {
		super(s);

		if (players == null) {
			players = new pentePlayer[] { new pentePlayer('W'),
					new pentePlayer('B'), };
		}

		this.size = size;
		int stringCounter = 0;
		diameter = (int) Math.sqrt(size);
		for (int i = 0; i < diameter; i++) {
			for (int j = 0; j < diameter; j++) {
				twoDBoard[i][j] = s.charAt(stringCounter);
				stringCounter++;
			}
		}

		board = s.toUpperCase().toCharArray();
	}

	public String toString() {
		return string;
	}

	@Override
	public State clone() {
		penteState newState = new penteState(this.string, size);
		return newState;
	}

	@Override
	public Collection<Move> actions() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean terminal() {
		if (Bwhite == true) {
			return true;
		}
		if (Bblack == true) {
			return true;
		}
		if (captureW == 5) {
			return true;
		}
		if (captureB == 5) {
			return true;
		}

		return false;
	}

	public double utility(Player p) {
		// TODO Auto-generated method stub
		return 0;
	}

	public Player toMove() {
		int b = charCount('B');
		int w = charCount('W');
		int toMove = (b <= w) ? 0 : 1;
		return players[toMove];
	}

	private int charCount(char m) {
		int count = 0;
		for (char c : board)
			if (c == m)
				count++;
		return count;
	}

	public State result(Move m) {
		penteMove n = (penteMove) m;
		int r = n.row();
		int c = n.col();
		int i = index(r, c);
		State s = clone();
		s.State[i] = toMove().toString().charAt(0);
		return s;
	}

	public boolean isCapture(int x, int y) {
		return false;
	}

	public void isfive() {
		counter = 0;
		fiveChecker();

	}
	
	public enum Direction
	{
		UP,UPRIGHT,UPLEFT,LEFT,RIGHT,DOWN,DOWNRIGHT,DOWNLEFT
	}

	public boolean fiveChecker(Direction direction, int x, int y,char color )
	{
		int xpos;
		int ypos;
		xpos = x;
		ypos = y;
		if(counter <= 5 && direction == direction.UP && color != 'X' )
		{
			if (twoDBoard[xpos][ypos - diameter] == color)
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.DOWNLEFT && color != 'X' )
		{
			if (twoDBoard[xpos-1][ypos + diameter] == color)
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.DOWNRIGHT && color != 'X' )
		{
			if (twoDBoard[xpos+1][ypos + diameter] == color)
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.UPLEFT && color != 'X' )
		{
			if (twoDBoard[xpos-1][ypos - diameter] == color)
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.UPRIGHT && color != 'X' )
		{
			if (twoDBoard[xpos + 1][ypos - diameter] == color)
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.LEFT)
		{
			if (twoDBoard[xpos-1][ypos] == color && color != 'X' )
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.RIGHT && color != 'X' )
		{
			if (twoDBoard[xpos + 1][ypos] == color)
			{
				return true;
			}
			else
				return false;
		}
		if(counter <= 5 && direction == direction.DOWN && color != 'X' )
		{
			if (twoDBoard[xpos][ypos + diameter] == color)
			{
				return true;
			}
			else
				return false;
		}
		else
		return false;

	}

}
