#BlueJ class context
comment0.params=len
comment0.target=Genome(int)
comment0.text=\r\n\ the\ simplest\ way\ to\ construct\ a\ genome,\r\n\ this\ method\ constructs\ a\ random\ bitstring\r\n\ @param\ len\ the\ number\ of\ bits\ in\ the\ new\ genome\r\n
comment1.params=len\ g
comment1.target=Genome(int,\ java.util.Random)
comment1.text=\r\n\ a\ better\ way\ to\ construct\ multiple\ genomes,\r\n\ this\ method\ constructs\ a\ random\ bitstring\r\n\ using\ a\ common\ Random\ number\ generator\r\n\ @param\ len\ the\ number\ of\ bits\ in\ the\ new\ genome\r\n\ @param\ gen\ a\ Random\ number\ generator\r\n
comment10.params=
comment10.target=void\ printHeading()
comment11.params=length\ cp
comment11.target=java.math.BigInteger\ getMask(int,\ double)
comment11.text=\r\n\ Produce\ a\ mask\ for\ efficient\ crossover\ between\ two\ genomes,\r\n\ i.e.\ a\ bitstring\ of\ the\ form\ ...\ 1...10...01...1\ ...\r\n\ This\ method\ has\ computational\ complexity\ O(length\ /\ cp)\r\n\ @param\ length\ the\ number\ of\ bits\ in\ the\ mask\r\n\ @param\ p\ the\ probability\ that\ any\ single\ bit\ location\ \r\n\ is\ a\ crossover\ point.\r\n\ @return\ the\ bitstring\ as\ a\ BigInteger\r\n
comment12.params=
comment12.target=void\ showMask()
comment12.text=\r\n\ test\ code\ for\ getMask()\r\n
comment13.params=p
comment13.target=boolean\ signal(double)
comment13.text=\r\n\ @return\ true\ with\ probability\ p,\ false\ otherwise\ \r\n
comment14.params=phenotypes
comment14.target=java.lang.Object[]\ getPhenome(phenotype.Phenotype[])
comment15.params=r\ p
comment15.target=java.lang.Object\ extract(int,\ phenotype.Phenotype)
comment16.params=phenotypes
comment16.target=java.lang.String\ getString(phenotype.Phenotype[])
comment17.params=r\ p
comment17.target=java.lang.String\ getString(int,\ phenotype.Phenotype)
comment18.params=
comment18.target=java.lang.String\ toString()
comment2.params=types\ values
comment2.target=Genome(phenotype.Phenotype[],\ java.lang.Object[])
comment2.text=\r\n\ for\ debugging,\ construct\ a\ genome\ \r\n\ from\ one\ list\ of\ phenotypes\ and\ another\ list\ of\ values\r\n\ @param\ b\ the\ bitstring\ stored\ as\ a\ BigInteger\r\n
comment3.params=b
comment3.target=Genome(java.math.BigInteger)
comment3.text=\r\n\ for\ debugging,\ construct\ a\ genome\ with\ a\ fixed\ string\ of\ bits\r\n\ @param\ b\ the\ bitstring\ stored\ as\ a\ BigInteger\r\n
comment4.params=b\ g
comment4.target=Genome(java.math.BigInteger,\ java.util.Random)
comment4.text=\r\n\ for\ very\ precise\ debugging,\ \r\n\ construct\ a\ genome\ with\ a\ fixed\ string\ of\ bits\r\n\ and\ a\ pre-seeded\ Random\ number\ generator\r\n\ @param\ b\ the\ bitstring\ stored\ as\ a\ BigInteger\r\n\ @param\ gen\ a\ Random\ number\ generator\r\n
comment5.params=
comment5.target=Genome\ clone()
comment6.params=
comment6.target=java.math.BigInteger\ getBits()
comment7.params=mp
comment7.target=Genome\ mutate(java.lang.Double)
comment8.params=g\ cp
comment8.target=Genome\ crossover(Genome,\ java.lang.Double)
comment8.text=\r\n\ Create\ a\ new\ genome\ from\ the\ cross\ of\ two\ parents.\r\n\ @param\ g\ the\ other\ parent,\ besides\ this\ one.\r\n\ @param\ cp\ the\ probability\ that\ any\ single\ bit\ location\ \r\n\ is\ a\ crossover\ point.\r\n\ @return\ the\ child\ created\ by\ crossing\ the\ two\ parents,\r\n\ both\ of\ which\ are\ undisturbed.\r\n
comment9.params=i
comment9.target=void\ printNumber(int)
numComments=19
